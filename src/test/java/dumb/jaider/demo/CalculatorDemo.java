package com.example.math;

/**
 * This class demonstrates a simulated interaction with Jaider (an AI coding assistant)
 * to build and enhance a simple Calculator class.
 */
public class CalculatorDemo {

    // Inner class to simulate the Calculator.java file content at different stages
    // This is purely for demonstration within this single file.
    // In a real scenario, these would be actual .java files.
    public static class Calculator {
        // Initial version (as if created by a developer or a previous Jaider session)
        public static int add(int a, int b) {
            return a + b;
        }

        public static int subtract(int a, int b) {
            return a - b;
        }

        // Methods to be "added by Jaider" later in the demo
        // These are initially commented out or absent in a real workflow
        public static int multiply(int a, int b) {
            return a * b; // Added in step 1
        }

        public static int divide(int a, int b) { // Added in step 1
            if (b == 0) {
                throw new IllegalArgumentException("Cannot divide by zero.");
            }
            return a / b;
        }
    }

    public static void main(String[] args) {
        System.out.println("Welcome to the Jaider Calculator Demo!");
        System.out.println("This demo simulates how you might interact with Jaider to develop a Java class.");
        System.out.println("--------------------------------------------------------------------------\n");

        showInitialCalculatorState();
        narrateAddMultiplyAndDivide();
        narrateAddUnitTests();
        narrateGenerateDocumentation();

        System.out.println("\n--------------------------------------------------------------------------");
        System.out.println("Calculator Demo finished. Key takeaways:");
        System.out.println("1. Provide clear and specific prompts to Jaider.");
        System.out.println("2. Review and verify code generated by Jaider.");
        System.out.println("3. Use Jaider iteratively to build and refine your code.");
        System.out.println("4. Jaider can help with boilerplate tasks like generating tests and Javadoc.");
        System.out.println("--------------------------------------------------------------------------");
    }

    private static void showInitialCalculatorState() {
        System.out.println("STAGE 0: Initial State of Calculator.java");
        System.out.println("Let's assume we have a basic Calculator.java file with add and subtract methods:\n");
        System.out.println("```java");
        System.out.println("package com.example.math;");
        System.out.println("");
        System.out.println("public class Calculator {");
        System.out.println("    public static int add(int a, int b) {");
        System.out.println("        return a + b;");
        System.out.println("    }");
        System.out.println("");
        System.out.println("    public static int subtract(int a, int b) {");
        System.out.println("        return a - b;");
        System.out.println("    }");
        System.out.println("}");
        System.out.println("```\n");

        // Demonstrate current functionality
        System.out.println("Current functionality:");
        System.out.println("Calculator.add(10, 5) = " + Calculator.add(10, 5));
        System.out.println("Calculator.subtract(10, 5) = " + Calculator.subtract(10, 5));
        System.out.println("\n--------------------------------------------------------------------------\n");
    }

    private static void narrateAddMultiplyAndDivide() {
        System.out.println("STAGE 1: Adding Multiply and Divide Methods");
        System.out.println("Now, we want to ask Jaider to add `multiply` and `divide` methods.");
        System.out.println("Best Practice: Be specific in your prompt. Mention requirements like handling division by zero.\n");
        System.out.println("Prompt to Jaider:");
        System.out.println("\"Please add two public static methods to the `com.example.math.Calculator` class:");
        System.out.println("1. `multiply(int a, int b)` which returns the product of a and b.");
        System.out.println("2. `divide(int a, int b)` which returns the result of a divided by b.");
        System.out.println("   Ensure that the `divide` method throws an `IllegalArgumentException` if b is zero, with the message 'Cannot divide by zero.'\"");
        System.out.println("\nJaider processes this and (simulated) updates `Calculator.java` as follows:\n");

        System.out.println("```java");
        System.out.println("package com.example.math;");
        System.out.println("");
        System.out.println("public class Calculator {");
        System.out.println("    public static int add(int a, int b) {");
        System.out.println("        return a + b;");
        System.out.println("    }");
        System.out.println("");
        System.out.println("    public static int subtract(int a, int b) {");
        System.out.println("        return a - b;");
        System.out.println("    }");
        System.out.println("");
        System.out.println("    // Added by Jaider");
        System.out.println("    public static int multiply(int a, int b) {");
        System.out.println("        return a * b;");
        System.out.println("    }");
        System.out.println("");
        System.out.println("    // Added by Jaider");
        System.out.println("    public static int divide(int a, int b) {");
        System.out.println("        if (b == 0) {");
        System.out.println("            throw new IllegalArgumentException(\"Cannot divide by zero.\");");
        System.out.println("        }");
        System.out.println("        return a / b;");
        System.out.println("    }");
        System.out.println("}");
        System.out.println("```\n");

        System.out.println("Best Practice: Always review and test code generated by Jaider.");
        System.out.println("Let's test the new methods (using the methods from our inner Calculator class for this demo):");
        System.out.println("Calculator.multiply(10, 5) = " + Calculator.multiply(10, 5));
        System.out.println("Calculator.divide(10, 5) = " + Calculator.divide(10, 2));
        try {
            System.out.print("Calculator.divide(10, 0) = ");
            Calculator.divide(10, 0);
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
        }
        System.out.println("\n--------------------------------------------------------------------------\n");
    }

    private static void narrateAddUnitTests() {
        System.out.println("STAGE 2: Generating Unit Tests");
        System.out.println("Next, we'll ask Jaider to generate unit tests for the `Calculator` class.");
        System.out.println("We'll assume we're using JUnit 5.");
        System.out.println("Best Practice: Specify the testing framework and any specific cases you want covered.\n");
        System.out.println("Prompt to Jaider:");
        System.out.println("\"Please generate JUnit 5 tests for the `com.example.math.Calculator` class.");
        System.out.println("Create a test class named `CalculatorTest` in the same package.");
        System.out.println("Include tests for all methods: `add`, `subtract`, `multiply`, and `divide`.");
        System.out.println("Ensure to test edge cases, especially for `divide`, including division by zero and division of zero.\"");
        System.out.println("\nJaider (simulated) generates `CalculatorTest.java`:\n");

        System.out.println("```java");
        System.out.println("package com.example.math;");
        System.out.println("");
        System.out.println("import org.junit.jupiter.api.Test;");
        System.out.println("import static org.junit.jupiter.api.Assertions.*;");
        System.out.println("");
        System.out.println("class CalculatorTest {");
        System.out.println("");
        System.out.println("    @Test");
        System.out.println("    void testAdd() {");
        System.out.println("        assertEquals(5, Calculator.add(2, 3));");
        System.out.println("        assertEquals(-1, Calculator.add(2, -3));");
        System.out.println("        assertEquals(0, Calculator.add(0, 0));");
        System.out.println("    }");
        System.out.println("");
        System.out.println("    @Test");
        System.out.println("    void testSubtract() {");
        System.out.println("        assertEquals(-1, Calculator.subtract(2, 3));");
        System.out.println("        assertEquals(5, Calculator.subtract(2, -3));");
        System.out.println("        assertEquals(0, Calculator.subtract(0, 0));");
        System.out.println("    }");
        System.out.println("");
        System.out.println("    @Test");
        System.out.println("    void testMultiply() {");
        System.out.println("        assertEquals(6, Calculator.multiply(2, 3));");
        System.out.println("        assertEquals(-6, Calculator.multiply(2, -3));");
        System.out.println("        assertEquals(0, Calculator.multiply(2, 0));");
        System.out.println("    }");
        System.out.println("");
        System.out.println("    @Test");
        System.out.println("    void testDivide() {");
        System.out.println("        assertEquals(2, Calculator.divide(6, 3));");
        System.out.println("        assertEquals(-2, Calculator.divide(6, -3));");
        System.out.println("        assertEquals(0, Calculator.divide(0, 5));");
        System.out.println("    }");
        System.out.println("");
        System.out.println("    @Test");
        System.out.println("    void testDivideByZero() {");
        System.out.println("        Exception exception = assertThrows(IllegalArgumentException.class, () -> {");
        System.out.println("            Calculator.divide(5, 0);");
        System.out.println("        });");
        System.out.println("        assertEquals(\"Cannot divide by zero.\", exception.getMessage());");
        System.out.println("    }");
        System.out.println("}");
        System.out.println("```\n");
        System.out.println("Best Practice: Run the generated tests to confirm they pass and cover the intended logic.");
        System.out.println("(In a real scenario, you would compile and run these tests using your build tool and JUnit.)");
        System.out.println("\n--------------------------------------------------------------------------\n");
    }

    private static void narrateGenerateDocumentation() {
        System.out.println("STAGE 3: Generating Javadoc Documentation");
        System.out.println("Finally, let's ask Jaider to add Javadoc comments to our `Calculator` class.");
        System.out.println("Best Practice: Request documentation for the class and all public methods, including parameters and return values.\n");
        System.out.println("Prompt to Jaider:");
        System.out.println("\"Please add Javadoc comments to the `com.example.math.Calculator` class and all its public methods.");
        System.out.println("Include descriptions for the class, each method, its parameters, and return values.");
        System.out.println("Also, add a private constructor to prevent instantiation since it's a utility class.\"");
        System.out.println("\nJaider (simulated) updates `Calculator.java` with Javadoc comments:\n");

        System.out.println("```java");
        System.out.println("package com.example.math;");
        System.out.println("");
        System.out.println("/**");
        System.out.println(" * Provides basic arithmetic operations.");
        System.out.println(" * This class demonstrates how Jaider can be used to generate and enhance code.");
        System.out.println(" */");
        System.out.println("public class Calculator {");
        System.out.println("");
        System.out.println("    /**");
        System.out.println("     * Private constructor to prevent instantiation.");
        System.out.println("     */");
        System.out.println("    private Calculator() {");
        System.out.println("        // Utility class");
        System.out.println("    }");
        System.out.println("");
        System.out.println("    /**");
        System.out.println("     * Adds two integers.");
        System.out.println("     *");
        System.out.println("     * @param a the first integer");
        System.out.println("     * @param b the second integer");
        System.out.println("     * @return the sum of a and b");
        System.out.println("     */");
        System.out.println("    public static int add(int a, int b) {");
        System.out.println("        return a + b;");
        System.out.println("    }");
        System.out.println("");
        System.out.println("    /**");
        System.out.println("     * Subtracts the second integer from the first.");
        System.out.println("     *");
        System.out.println("     * @param a the first integer");
        System.out.println("     * @param b the second integer");
        System.out.println("     * @return the result of subtracting b from a");
        System.out.println("     */");
        System.out.println("    public static int subtract(int a, int b) {");
        System.out.println("        return a - b;");
        System.out.println("    }");
        System.out.println("");
        System.out.println("    /**");
        System.out.println("     * Multiplies two integers.");
        System.out.println("     *");
        System.out.println("     * @param a the first integer");
        System.out.println("     * @param b the second integer");
        System.out.println("     * @return the product of a and b");
        System.out.println("     */");
        System.out.println("    public static int multiply(int a, int b) {");
        System.out.println("        return a * b;");
        System.out.println("    }");
        System.out.println("");
        System.out.println("    /**");
        System.out.println("     * Divides the first integer by the second.");
        System.out.println("     *");
        System.out.println("     * @param a the dividend");
        System.out.println("     * @param b the divisor");
        System.out.println("     * @return the result of dividing a by b");
        System.out.println("     * @throws IllegalArgumentException if the divisor b is zero");
        System.out.println("     */");
        System.out.println("    public static int divide(int a, int b) {");
        System.out.println("        if (b == 0) {");
        System.out.println("            throw new IllegalArgumentException(\"Cannot divide by zero.\");");
        System.out.println("        }");
        System.out.println("        return a / b;");
        System.out.println("    }");
        System.out.println("}");
        System.out.println("```\n");
        System.out.println("Best Practice: Review the generated documentation for clarity, correctness, and completeness.");
        System.out.println("You can then generate HTML documentation using the Javadoc tool.");
    }
}
