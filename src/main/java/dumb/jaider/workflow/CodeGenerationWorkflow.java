package dumb.jaider.workflow;

import dumb.jaider.integration.OllamaService;
import dumb.jaider.integration.ProjectManager;
import dumb.jaider.integration.VerificationService;
import dumb.jaider.service.BuildManagerService; // For BuildResult
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.nio.file.Path;

public class CodeGenerationWorkflow {

    private static final Logger logger = LoggerFactory.getLogger(CodeGenerationWorkflow.class);

    // Inner record for result passing from generation step
    public record ProjectGenerationResult(String generatedCode, Path projectPath, Path javaFilePath) {}

    // Inner record for result passing from enhancement step
    public record EnhanceProjectResult(String enhancedCode, Path javaFilePath) {}

    // Inner record for result passing from ask question step
    public record AskQuestionResult(String answer) {}


    private final OllamaService ollamaService;
    private final ProjectManager projectManager;
    private final VerificationService verificationService;
    // BuildManagerService might be needed if compilation is part of this specific workflow class
    // private final BuildManagerService buildManagerService;

    public CodeGenerationWorkflow(OllamaService ollamaService, ProjectManager projectManager, VerificationService verificationService) {
        this.ollamaService = ollamaService;
        this.projectManager = projectManager;
        this.verificationService = verificationService;
        // this.buildManagerService = new BuildManagerService(); // Or pass as dependency
    }

    /**
     * Generates the initial project code, saves it, and creates a POM file.
     * Assumes ProjectManager has an active project directory (created via createTemporaryProject).
     */
    public ProjectGenerationResult generateInitialProject(String description, String packageName, String className, String pomContent, String... verificationKeywords) throws WorkflowException {
        logger.info("Workflow: Generating initial project for '{}'", description);
        try {
            // Ensure project directory is ready
            if (projectManager.getProjectDir() == null) {
                logger.error("ProjectManager's project directory is null. It must be initialized before calling this method.");
                throw new WorkflowException("Project directory not initialized in ProjectManager. Call projectManager.createTemporaryProject() first.");
            }

            // Step 1: Generate code from Ollama
            String generatedCode = ollamaService.generateCode(description);
            if (generatedCode == null || generatedCode.isEmpty()) {
                logger.error("Ollama failed to generate code for description: {}", description);
                throw new WorkflowException("Ollama failed to generate code.");
            }
            logger.info("Initial code generated by Ollama. Length: {}", generatedCode.length());

            // Perform basic verification
            verificationService.verifyCodeContains(generatedCode, "Initial Code", verificationKeywords);

            // Step 2: Save code and POM file
            Path projectJavaFile = projectManager.saveJavaFile(packageName, className, generatedCode);
            projectManager.createPomFile(pomContent);
            logger.info("Java file and POM.xml saved for project in directory: {}", projectManager.getProjectDir());

            return new ProjectGenerationResult(generatedCode, projectManager.getProjectDir(), projectJavaFile);

        } catch (IOException e) {
            logger.error("IOException during project generation workflow: {}", e.getMessage(), e);
            throw new WorkflowException("Failed to generate initial project due to IO error: " + e.getMessage(), e);
        } catch (AssertionError e) {
             logger.error("Verification failed during project generation: {}", e.getMessage(), e);
             throw new WorkflowException("Verification failed during project generation: " + e.getMessage(), e);
        } catch (Exception e) {
            logger.error("Unexpected exception during project generation workflow: {}", e.getMessage(), e);
            throw new WorkflowException("Unexpected error during project generation: " + e.getMessage(), e);
        }
    }

    /**
     * Compiles the project managed by ProjectManager.
     * Assumes ProjectManager has an active project directory with code and pom.xml.
     */
    public BuildManagerService.BuildResult compileProject(String stepName) throws WorkflowException {
        logger.info("Workflow: Compiling project for step '{}'", stepName);
        if (projectManager.getProjectDir() == null) {
            logger.error("ProjectManager's project directory is null. Cannot compile.");
            throw new WorkflowException("Project directory not initialized in ProjectManager. Cannot compile.");
        }

        // Optional: Verify essential files exist before attempting compilation
        // verificationService.verifyPomExists(projectManager.getProjectDir());
        // verificationService.verifyJavaFileExists(projectManager.getProjectDir(), ...); // Needs package/class names

        BuildManagerService.BuildResult compileResult = projectManager.compile();
        // Allow verifyCompilationSucceeded to throw AssertionError directly, which will be caught by the test framework
        // or handled by the calling interactive demo logic.
        verificationService.verifyCompilationSucceeded(compileResult, stepName);
        logger.info("Workflow: Project compilation successful for step '{}'", stepName);
        return compileResult;
    }

    /**
     * Asks a question about the provided code context using OllamaService.
     */
    public AskQuestionResult askQuestionAboutCode(String codeContext, String question, String... verificationKeywords) throws WorkflowException {
        logger.info("Workflow: Asking question about code: '{}'", question);
        if (codeContext == null || codeContext.isEmpty()) {
            throw new WorkflowException("Code context cannot be null or empty when asking a question.");
        }
        String answer = ollamaService.askQuestion(codeContext, question);
        if (answer == null) { // Explicitly check for null if OllamaService can return null
            logger.warn("Ollama returned a null answer for question: {}", question);
             throw new WorkflowException("Ollama returned a null answer.");
        }
         if (answer.isEmpty()) {
            logger.warn("Ollama returned an empty answer for question: {}", question);
            // Depending on strictness, this could be an exception. For now, allow empty answers.
        }
        logger.info("Answer received from Ollama. Length: {}", answer.length());

        if (verificationKeywords != null && verificationKeywords.length > 0) {
            verificationService.verifyCodeContains(answer, "Answer to question: " + question, verificationKeywords);
        }
        return new AskQuestionResult(answer);
    }

    /**
     * Enhances existing code using OllamaService and saves the updated code.
     * Assumes ProjectManager has an active project directory.
     */
    public EnhanceProjectResult enhanceProject(String existingCode, String enhancementDescription, String packageName, String className, String... verificationKeywords) throws WorkflowException {
        logger.info("Workflow: Enhancing project with '{}'", enhancementDescription);
        try {
            if (projectManager.getProjectDir() == null) {
                logger.error("ProjectManager's project directory is null. Cannot enhance project.");
                throw new WorkflowException("Project directory not initialized in ProjectManager. Cannot enhance project.");
            }
            if (existingCode == null || existingCode.isEmpty()) {
                throw new WorkflowException("Existing code cannot be null or empty for enhancement.");
            }

            String enhancedCode = ollamaService.enhanceCode(existingCode, enhancementDescription);
            if (enhancedCode == null || enhancedCode.isEmpty()) {
                logger.error("Ollama failed to generate enhanced code for description: {}", enhancementDescription);
                throw new WorkflowException("Ollama failed to generate enhanced code.");
            }
            logger.info("Enhanced code generated by Ollama. Length: {}", enhancedCode.length());

            // Perform verifications
            verificationService.verifyCodeIsLonger(existingCode, enhancedCode, className + ".java");
            if (verificationKeywords != null && verificationKeywords.length > 0) {
                verificationService.verifyCodeContains(enhancedCode, "Enhanced Code", verificationKeywords);
            }

            Path projectJavaFile = projectManager.saveJavaFile(packageName, className, enhancedCode); // Overwrites existing
            logger.info("Enhanced Java file saved: {}", projectJavaFile);

            return new EnhanceProjectResult(enhancedCode, projectJavaFile);

        } catch (IOException e) {
            logger.error("IOException during project enhancement workflow: {}", e.getMessage(), e);
            throw new WorkflowException("Failed to enhance project due to IO error: " + e.getMessage(), e);
        } catch (AssertionError e) {
             logger.error("Verification failed during project enhancement: {}", e.getMessage(), e);
             throw new WorkflowException("Verification failed during project enhancement: " + e.getMessage(), e);
        } catch (Exception e) {
            logger.error("Unexpected exception during project enhancement workflow: {}", e.getMessage(), e);
            throw new WorkflowException("Unexpected error during project enhancement: " + e.getMessage(), e);
        }
    }

    // Custom exception for the workflow
    public static class WorkflowException extends Exception {
        public WorkflowException(String message) {
            super(message);
        }

        public WorkflowException(String message, Throwable cause) {
            super(message, cause);
        }
    }
}
