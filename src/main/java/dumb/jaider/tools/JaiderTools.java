package dumb.jaider.tools;

import dev.langchain4j.agent.tool.Tool;
import dumb.jaider.model.JaiderModel;
import dumb.jaider.model.StagedUpdate;
import dumb.jaider.service.SelfUpdateOrchestratorService;

// No longer needed for basic path validation if JaiderModel isn't used directly here yet
// import java.io.File;
// import java.util.regex.Pattern; // Commented out as Pattern is no longer used

public class JaiderTools {

    private final SelfUpdateOrchestratorService selfUpdateOrchestratorService; // New dependency

    // private static final Pattern GIT_MERGE_DIFF_FORMAT_PATTERN = Pattern.compile(
    //         "(?s).*<<<<<<< SEARCH.*=======.*>>>>>>> REPLACE.*");

    /**
     * Constructor for JaiderTools.
     * @param jaiderModel The JaiderModel instance.
     * @param selfUpdateOrchestratorService The service to orchestrate self-updates.
     */
    public JaiderTools(JaiderModel jaiderModel, SelfUpdateOrchestratorService selfUpdateOrchestratorService) {
        if (jaiderModel == null) {
            throw new IllegalArgumentException("JaiderModel cannot be null.");
        }
        if (selfUpdateOrchestratorService == null) {
            throw new IllegalArgumentException("SelfUpdateOrchestratorService cannot be null.");
        }
        // Retained for future use, though not directly used in this version of proposeSelfUpdate
        this.selfUpdateOrchestratorService = selfUpdateOrchestratorService;
    }

    /**
     * Proposes a self-update to Jaider's own codebase by providing a file path (relative to the project root),
     * a diff in the standard unified diff format (e.g., generated by `diff -u` or `git diff`),
     * and an optional commit message. This stages the update for user review via the SelfUpdateOrchestratorService.
     *
     * @param filePath The relative path to the file to be updated.
     * @param diffContent The diff content in standard unified diff format.
     * @param commitMessage An optional commit message for the change.
     * @return A message indicating whether the proposal was successfully staged.
     */
    @Tool(name = "proposeSelfUpdate",
          value = "Proposes a self-update to Jaider's own codebase by providing a file path (relative to the project root), a diff in the standard unified diff format (e.g., generated by `diff -u` or `git diff`), and an optional commit message. This stages the update for user review and approval before application.")
    public String proposeSelfUpdate(String filePath, String diffContent, String commitMessage) {
        if (filePath == null || filePath.trim().isEmpty()) {
            return "Error: filePath cannot be blank.";
        }
        if (diffContent == null || diffContent.trim().isEmpty()) {
            return "Error: diffContent cannot be blank.";
        }

        // if (!GIT_MERGE_DIFF_FORMAT_PATTERN.matcher(diffContent).matches()) {
        //     return "Error: Invalid diff format. Ensure the content includes '<<<<<<< SEARCH', '=======', and '>>>>>>> REPLACE' markers in the correct order.";
        // }

        var effectiveCommitMessage = (commitMessage == null || commitMessage.trim().isEmpty())
                                        ? "Jaider proposed self-update for " + filePath
                                        : commitMessage;

        var update = new StagedUpdate(filePath, diffContent, effectiveCommitMessage);

        var stagedSuccessfully = selfUpdateOrchestratorService.stageUpdate(update);

        if (stagedSuccessfully) {
            selfUpdateOrchestratorService.triggerUserConfirmationProcess();
            // System.err no longer primary, orchestrator handles logging of staging.
            // System.err.println("SELF-UPDATE PROPOSED VIA ORCHESTRATOR:");
            // System.err.println("  File Path: " + filePath);
            // System.err.println("  Commit Message: " + effectiveCommitMessage);
            // System.err.println("  Diff Content:\n---\n" + diffContent + "\n---");
            return "Update for file '" + filePath + "' has been successfully staged and the user confirmation process has been initiated. Please respond to the confirmation dialog to apply this change.";
        } else {
            return "Error: Could not stage the update for '" + filePath + "'. The system might be busy or an internal error occurred (e.g., another update already in progress or pending).";
        }
    }

    /**
     * Proposes a self-update to Jaider's own codebase by providing a file path and a diff.
     * A default commit message will be used.
     * This stages the update for user review via the SelfUpdateOrchestratorService.
     *
     * @param filePath The relative path to the file to be updated.
     * @param diffContent The diff content in standard unified diff format.
     * @return A message indicating whether the proposal was successfully staged.
     */
    // @Tool(name = "proposeSelfUpdate",
    //       value = "Proposes a self-update to Jaider's own codebase by providing a file path (relative to the project root) and a diff in the standard unified diff format (e.g., generated by `diff -u` or `git diff`). A default commit message will be generated. This stages the update for user review and approval before application.")
    public String proposeSelfUpdate(String filePath, String diffContent) {
        return proposeSelfUpdate(filePath, diffContent, null); // Call the main method with a null commit message
    }
}
